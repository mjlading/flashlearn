// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Entities used for Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  decks                 Deck[]
  bookmarkedDecks       BookmarkedDeck[]
  deckRatings           DeckRating[]
  userDeckKnowledges    UserDeckKnowledge[]
  rehearsals            Rehearsal[]
  collections           Collection[]
  roadmapUserProgresses RoadmapUserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Entities defined from our own ER-diagram
model Deck {
  id            String   @id @default(cuid())
  name          String
  isPublic      Boolean  @default(false)
  averageRating Float?
  academicLevel Int
  dateCreated   DateTime @default(now())
  dateChanged   DateTime @updatedAt
  numFlashcards Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  subjectName String
  subject     Subject @relation(fields: [subjectName], references: [name])

  bookmarkedDecks    BookmarkedDeck[]
  deckRatings        DeckRating[]
  userDeckKnowledges UserDeckKnowledge[]
  flashcards         Flashcard[]
  rehearsals         Rehearsal[]
  deckRehearsals     DeckRehearsal[]
  collectionDecks    CollectionDeck[]
  roadmapSteps       RoadmapStep[]
}

// Many-to-many between User and Deck
model BookmarkedDeck {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  @@id([userId, deckId])
}

// Many-to-many between User and Deck
model DeckRating {
  stars Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  @@id([userId, deckId])
}

// Many-to-many between User and Deck
model UserDeckKnowledge {
  knowledgeLevel Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  @@id([userId, deckId])
}

model Subject {
  name String @id

  decks Deck[]
}

// On deck deletion, delete all related flashcards and rehearsals
model Flashcard {
  id    String  @id @default(cuid())
  front String
  back  String
  tag   String?

  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  flashcardRehearsals FlashcardRehearsal[]
}

enum Mode {
  VISUAL
  WRITE
  ORAL
}

model Rehearsal {
  id        String   @id @default(cuid())
  mode      Mode
  dateStart DateTime @default(now())
  dateEnd   DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
  Deck   Deck   @relation(fields: [deckId], references: [id])
  deckId String

  flashcardRehearsals FlashcardRehearsal[]
  deckRehearsals      DeckRehearsal[]
}

// Many-to-many between Rehearsal and Flashcard
model FlashcardRehearsal {
  score Int

  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id])
  rehearsalId String

  @@id([flashcardId, rehearsalId])
}

// Many-to-many between Rehearsal and Deck
model DeckRehearsal {
  score Int

  deck        Deck      @relation(fields: [deckId], references: [id])
  deckId      String
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id])
  rehearsalId String

  @@id([deckId, rehearsalId])
}

model Collection {
  id   String @id @default(cuid())
  name String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  collectionDecks CollectionDeck[]

  @@unique([name, userId]) // A user's collections must have unique names
}

// Many-to-many between Collection and Deck
model CollectionDeck {
  deck         Deck       @relation(fields: [deckId], references: [id])
  deckId       String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@id([deckId, collectionId])
}

model Course {
  id          String  @id @default(cuid())
  name        String
  courseCode  String?
  institution String?

  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId String  @unique
}

model Roadmap {
  id          String  @id @default(cuid())
  name        String
  description String?

  course                Course?
  roadmapSteps          RoadmapStep[]
  roadmapUserProgresses RoadmapUserProgress[]
}

model RoadmapStep {
  name             String
  description      String?
  recommendedLinks String[]
  sequenceOrder    Int      @default(autoincrement())

  deck      Deck    @relation(fields: [deckId], references: [id])
  deckId    String
  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId String

  @@id([deckId, roadmapId])
}

// Many-to-many between Roadmap and User
model RoadmapUserProgress {
  currentStep Int @default(0)

  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@id([roadmapId, userId])
}
